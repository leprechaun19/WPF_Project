//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelBooking.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelBookingEntities1 : DbContext
    {
        public HotelBookingEntities1()
            : base("name=HotelBookingEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<CategoryOfRoom> CategoryOfRooms { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Pay> Pays { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<TypeOfFood> TypeOfFoods { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }
        public virtual DbSet<Autorization> Autorizations { get; set; }
    
        public virtual ObjectResult<SelectBooking> SelectBookings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectBooking>("SelectBookings");
        }
    
        public virtual ObjectResult<Autorization> Enter(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Autorization>("Enter", loginParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Autorization> Enter(string login, string password, MergeOption mergeOption)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Autorization>("Enter", mergeOption, loginParameter, passwordParameter);
        }
    
        public virtual ObjectResult<FreeRooms> FreeRooms(Nullable<System.DateTime> datee)
        {
            var dateeParameter = datee.HasValue ?
                new ObjectParameter("datee", datee) :
                new ObjectParameter("datee", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FreeRooms>("FreeRooms", dateeParameter);
        }
    
        public virtual ObjectResult<SelectBooking> SelectArrival(Nullable<System.DateTime> datee)
        {
            var dateeParameter = datee.HasValue ?
                new ObjectParameter("datee", datee) :
                new ObjectParameter("datee", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectBooking>("SelectArrival", dateeParameter);
        }
    
        public virtual ObjectResult<SelectBooking> SelectDeparture(Nullable<System.DateTime> datee)
        {
            var dateeParameter = datee.HasValue ?
                new ObjectParameter("datee", datee) :
                new ObjectParameter("datee", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectBooking>("SelectDeparture", dateeParameter);
        }
    
        public virtual ObjectResult<FreeRoomsForBooking> FreeRoomsForBooking(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FreeRoomsForBooking>("FreeRoomsForBooking", date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<Search_Result> Search(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> people)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var peopleParameter = people.HasValue ?
                new ObjectParameter("people", people) :
                new ObjectParameter("people", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Search_Result>("Search", date1Parameter, date2Parameter, peopleParameter);
        }
    }
}
